Install a package in R: 
 - install.packages("package_name")
 
 Load a package in console:
  - library(package_name)
  
 The easiest way to create a vector is with the c() function, which stands for 'concatenate' or 'combine'. To create a vector containing the numbers 1.1, 9, and 3.14, type c(1.1, 9, 3.14). Try it now and store the result in a variable called z.
> z <- c(1.1, 9, 3.14)

Operations with vectors:
 - z + 555 + z
[1] 557.20 573.00 561.28
 - c(z, 555, z)
[1]   1.10   9.00   3.14 555.00   1.10   9.00   3.14
 - z * 2 + 100
[1] 102.20 118.00 106.28
- c(1, 2, 3, 4) + c(0, 10)
[1]  1 12  3 14
 - Behind the scenes, R is 'recycling' the 2 to make a vector of 2s and the 100 to make a vector of 100s. In other words, when you ask R to compute z * 2 + 100, what it really computes is this: z * c(2, 2, 2) + c(100, 100, 100)
 - If the length of the shorter vector does not divide evenly into the length of | the longer vector, R will still apply the 'recycling' method, but will throw | a warning to let you know something fishy might be going on.
 
 You can type the first two letters of the variable name, then hit the Tab key (possibly more than once). Most programming environments will provide a list of variables that you've created that begin with 'my'. This is called auto-completion and can be quite handy when you have many variables in your workspace. Give it a try. (If auto-completion doesn't work for you, just type my_div and press Enter.)
 
 Get the current workind directory:
  - getwd()
  
 List all the objects in your local workspace:
 - ls()
 
 List all the files in your working directory:
 - list.files() or dir()
 
 Create a directory in the current working directory called "testdir":
 - dir.create("testdir")
 
 Set your working directory to "testdir":
 - setwd("testdir")
 
 Create a file in your working directory called "mytest.R":
 - file.create("mytest.R")
 
 Check if a file exista in the working directory using:
 - file.exists("File_Name")
 
 Access the info of a file with:
 - file.info("file_name")
 
 Change the name of the file "mytest.R" to "mytest2.R" by using file.rename():
- file.rename("mytest.R", "mytest2.R")

Provide the relative path to the file "mytest3.R" by using file.path():
- file.path("mytest3.R")

Delete the 'testdir' directory that you just left (and everything in it with recursive = TRUE):
 - unlink("testdir", recursive = TRUE)

Create sequences of numbers:
 -  1:20 
 [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20]
 That gave us every integer between (and including) 1 and 20. We could also
use it to create a sequence of real numbers. For example, try pi:10
[1]  3.141593  4.141593  5.141593  6.141593  7.141593  8.141593  9.141593
 [8] 10.141593 11.141593 12.141593 13.141593 14.141593 15.141593 16.141593
[15] 17.141593 18.141593 19.141593
The result is a vector of real numbers starting with pi (3.142...) and increasing in increments of 1. The upper limit of 10 is never reached, since the next number in our sequence would be greater than 10.
- seq(0, 10 , by = 0.5)
 [1]  0.0  0.5  1.0  1.5  2.0  2.5  3.0  3.5  4.0  4.5  5.0  5.5  6.0  6.5  7.0 [16]  7.5  8.0  8.5  9.0  9.5 10.0
- my_seq <- seq(5, 10, length = 30)
- length(my_seq)
[1] 30
- rep(0, times = 40)
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
[39] 0 0
If instead we want our vector to contain 10 repetitions of the vector (0, 1, 2), we can do rep(c(0, 1, 2), times = 10). Go ahead:
 - rep(c(0, 1, 2), times = 10)
 [1] 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2 0 1 2
 - rep(c(0, 1, 2), each = 10)
 [1] 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2
 
Vectors come in two different flavors: atomic vectors and lists. An atomic vector contains exactly one data type, whereas a list may contain multiple data types. We'll explore atomic vectors further before we get to lists. 
Logical vectors can contain the values TRUE, FALSE, and NA (for 'not available'). These values are generated as the result of logical 'conditions'. 
- tf <- num_vect < 1
 TRUE FALSE  TRUE FALSE
- my_char <- c("My", "name", "is")
[1] "My"   "name" "is" 

Type paste(my_char, collapse = " ") now. Make sure there's a space between
the double quotes in the `collapse` argument. You'll see why in a second.
- paste(my_char, collapse = " ")
[1] "My name is"
-  paste("Hello", "world!", sep = " ")
[1] "Hello world!"

Also worth noting is that the numeric vector 1:4 gets 'coerced' into a character vector by the paste() function. 
 - paste(LETTERS, 1:4, sep = "-")
 [1] "A-1" "B-2" "C-3" "D-4" "E-1" "F-2" "G-3" "H-4" "I-1" "J-2" "K-3" "L-4"
[13] "M-1" "N-2" "O-3" "P-4" "Q-1" "R-2" "S-3" "T-4" "U-1" "V-2" "W-3" "X-4"
[25] "Y-1" "Z-2"

NA is used to represent any value that is 'not available' or 'missing' (in the statistical sense)

To make things a little more interesting, lets create a vector containing 1000 draws from a standard normal distribution with y <- rnorm(1000).
 - y <- rnorm(1000)
 
 Finally, let's select 100 elements at random from these 2000 values (combining y and z) such that we don't know how many NAs we'll wind up with or what positions they'll occupy in our final vector
- my_data <- sample(c(y, z), 100)

Now that we've got NAs down pat, let's look at a second type of missing value NaN, which stands for 'not a number'.

Inf = infinity
For a simple example, try x[1:10] to view the first ten elements of x.
 - x[1:10]
 [1]  1.82960449          NA          NA -0.01420717          NA          NA
 [7] -0.95686552          NA          NA          NA
 
Therefore, if we want to create a vector called y that contains all of the non-NA values from x, we can use:
- y <- x[!is.na(x)]
[1]  1.82960449 -0.01420717 -0.95686552 -0.02615314 -0.01999245  0.11888056
 [7]  1.33128065  1.21954035  0.60196540 -0.19164455  0.20947330 -0.99484102
[13]  0.77856392 -0.01725882 -0.88255817 -0.54447576 -1.37303606 -1.64194290
[19]  0.31018188  0.37021170

Recall that the expression y > 0 will give us a vector of logical values the
same length as y, with TRUEs corresponding to values of y that are greater
than zero and FALSEs corresponding to values of y that are less than or equal to zero.
 - Type y[y > 0] to see that we get all of the positive elements of y, which are also the positive elements of our original vector x.

 Can you figure out how we'd subset the 3rd, 5th, and 7th elements of x? Hint - Use the c() function to specify the element numbers as a numeric vector
 -  x[c(3, 5, 7)]
[1]         NA         NA -0.9568655
Whereas x[c(2, 10)] gives us ONLY the 2nd and 10th elements of x, x[c(-2, -10)] gives us all elements of x EXCEPT for the 2nd and 10 elements. 
 x[c(-2, -10)]
 [1]  1.82960449          NA -0.01420717          NA          NA -0.95686552
 [7]          NA          NA -0.02615314          NA -0.01999245          NA
[13]          NA  0.11888056          NA          NA          NA  1.33128065
[19]  1.21954035  0.60196540 -0.19164455  0.20947330          NA          NA
[25] -0.99484102  0.77856392 -0.01725882 -0.88255817          NA -0.54447576
[31] -1.37303606          NA -1.64194290  0.31018188  0.37021170          NA
[37]          NA          NA

- vect <- c(foo = 11, bar = 2, norf = NA)
 foo  bar norf 
  11    2   NA 
- names(vect)
[1] "foo"  "bar"  "norf"
- vect["bar"]
bar 
  2 
  
Matrices can only contain a single class of data, while data frames can consist of many different classes of data.
- my_vector <- 1:20
 - dim(my_vector) <- c(4, 5)
 - my_vector
     [,1] [,2] [,3] [,4] [,5]
[1,]    1    5    9   13   17
[2,]    2    6   10   14   18
[3,]    3    7   11   15   19
[4,]    4    8   12   16   20
  - class(my_vector)
[1] "matrix"
 - my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
 - identical(my_matrix, my_matrix2)
[1] TRUE

When dealing with patients. matrices can only contain ONE class of data. Therefore, when we tried to combine a character vector with a numeric matrix, R was forced to 'coerce' the numbers to characters, hence the double quotes
- patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
     patients                       
[1,] "Bill"   "1" "5" "9"  "13" "17"
[2,] "Gina"   "2" "6" "10" "14" "18"
[3,] "Kelly"  "3" "7" "11" "15" "19"
[4,] "Sean"   "4" "8" "12" "16" "20"

how to include the names of our patients in the table without destroying the integrity of our numeric data:
- my_data <- data.frame(patients, my_matrix)
- y_data
  patients X1 X2 X3 X4 X5
1     Bill  1  5  9 13 17
2     Gina  2  6 10 14 18
3    Kelly  3  7 11 15 19
4     Sean  4  8 12 16 20

Since we have six columns (including patient names), we'll need to first create a vector containing one element for each column. Create a character vector called cnames that contains the following values (in order): "patient", "age", "weight", "bp", "rating", "test".
 - cnames <- c("patient", "age", "weight", "bp", "rating", "test")
 - colnames(my_data) <- cnames
 - my_data
  patient age weight bp rating test
1    Bill   1      5  9     13   17
2    Gina   2      6 10     14   18
3   Kelly   3      7 11     15   19
4    Sean   4      8 12     16   20

Booleans and vectors. The left operand is only evaluated with the first member of the right operand (the vector). The rest of the elements in the vector aren't evaluated at all in this expression.
- TRUE && c(TRUE, FALSE, FALSE) # && only the first no, & all of them
[1] TRUE
- TRUE || c(TRUE, FALSE, FALSE) # || only the first no, | all of them
[1] TRUE
Let's walk through the order of operations in the below case. First the left
and right operands of the AND operator are evaluated. 6 is not equal 8, 4 is
greater than 3.9, therefore both operands are TRUE so the resulting expression `TRUE && TRUE` evaluates to TRUE. Then the left operand of the OR
operator is evaluated: 5 is not greater than 8 so the entire expression is
reduced to FALSE || TRUE. Since the right operand of this expression is TRUE
the entire expression evaluates to TRUE.
- 5 > 8 || 6 != 8 && 4 > 3.9
[1] TRUE

- isTRUE(6>4)
[1] TRUE

The xor() function stands for exclusive OR. If one argument evaluates to TRUE and one argument evaluates to FALSE, then this function will return TRUE, otherwise it will return FALSE. 

 - ints <- sample(10) # The vector `ints` is a random sampling of integers from 1 to 10 without replacement. 
 - which(ints > 7) # The which() function takes a logical vector as an argument and returns the indices of the vector that are TRUE.

 Functions 
 -  Sys.Date()
[1] "2015-12-12"
- function_name <- function(arg1, arg2){
#	# Manipulate arguments in some way
#	# Return a value
}
- two slogans are helpful: 1. Everything that exists is an object. 
                           2. Everything that happens is a function call.
- to see the source code for any function, just type the function name without any arguments or parentheses.
 - args(remainder) to examine the arguments for the function
 
 standard deviation of the vector c(1.4, 3.6, 7.9, 8.8):
 - sd(c(1.4, 3.6, 7.9, 8.8))

- telegram <- function(...){
	paste("START", ..., "STOP")  
}
- telegram("nu")
[1] "START nu STOP"


Each of the *apply functions will SPLIT up some data into smaller pieces,  APPLY a function to each piece, then COMBINE the results. A more detailed  discussion of this strategy is found in Hadley Wickham's Journal of Statistical Software paper titled 'The Split-Apply-Combine Strategy for Data
Analysis'

The Flags dataset from the UCI Machine Learning Repository contains details
of various nations and their flags. More information may be found here:
http://archive.ics.uci.edu/ml/datasets/Flags . I've stored the dataset in a variable called flags. Type head(flags) to preview the first six lines (i.e. the 'head') of the dataset.

Now, let's check out the dimensions of the dataset using dim(flags).
- dim(flags)
[1] 194  30 # 194 rows (observations) and 30 columns (variables)
- class(flags)
[1] "data.frame"

lapply() function takes a list as input, applies a function to each element of the list, then returns a list of the same length as the original one.

Since a data frame is really just a list of vectors (you can see this with as.list(flags)), we can use lapply() to apply the class() function to each column of the flags dataset. Let's see it in action!
Type cls_list <- lapply(flags, class) to apply the class() function to each column of the flags dataset and store the result in a variable called
cls_list. Note that you just supply the name of the function you want to
apply (i.e. class), without the usual parentheses after it.
- cls_list <- lapply(flags, class)
- cls_list
$name
[1] "factor"

$landmass
[1] "integer"

$zone
[1] "integer"

$area
[1] "integer"

$population
[1] "integer"

$language
[1] "integer"

$religion
[1] "integer"

$bars
[1] "integer"

$stripes
[1] "integer"

$colours
[1] "integer"

$red
[1] "integer"

$green
[1] "integer"

$blue
[1] "integer"

$gold
[1] "integer"

$white
[1] "integer"

$black
[1] "integer"

$orange
[1] "integer"

$mainhue
[1] "factor"

$circles
[1] "integer"

$crosses
[1] "integer"

$saltires
[1] "integer"

$quarters
[1] "integer"

$sunstars
[1] "integer"

$crescent
[1] "integer"

$triangle
[1] "integer"

$icon
[1] "integer"

$animate
[1] "integer"

$text
[1] "integer"

$topleft
[1] "factor"

$botright
[1] "factor"

In this case, since every element of the list returned by lapply() is a character vector of length one (i.e. "integer" and "vector"), cls_list can be simplified to a character vector. To do this manually, type as.character(cls_list).
-  as.character(cls_list)
 [1] "factor"  "integer" "integer" "integer" "integer" "integer" "integer"
 [8] "integer" "integer" "integer" "integer" "integer" "integer" "integer"
[15] "integer" "integer" "integer" "factor"  "integer" "integer" "integer"
[22] "integer" "integer" "integer" "integer" "integer" "integer" "integer"
[29] "factor"  "factor"

sapply() allows you to automate this process by calling lapply() behind the
scenes, but then attempting to simplify (hence the 's' in 'sapply') the
result for you. Use sapply() the same way you used lapply() to get the class
of each column of the flags dataset and store the result in cls_vect. If you
need help, type ?sapply to bring up the documentation.
- cls_vect <- sapply(flags, class)
-  class(cls_vect)
[1] "character"

In general, if the result is a list where every element is of length one,
then sapply() returns a vector. If the result is a list where every element
is a vector of the same length (> 1), sapply() returns a matrix. If sapply()
can't figure things out, then it just returns a list, no different from what
lapply() would give you

- sum(flags$orange)
[1] 26

First, use flag_colors <- flags[, 11:17] to extract the columns containing
the color data and store them in a new data frame called flag_colors. (Note
the comma before 11:17. This subsetting command tells R that we want all
rows, but only columns 11 through 17.)
Use the head() function to look at the first 6 lines of flag_colors.
- head(flag_colors)
  red green blue gold white black orange
1   1     1    0    1     1     1      0
2   1     0    0    1     0     1      0
3   1     1    0    0     1     0      0
4   1     0    1    1     1     0      1
5   1     0    1    1     0     0      0
6   1     0    0    1     0     1      0

The range() function returns the minimum and maximum of its first argument,
which should be a numeric vector.

When given a vector, the unique() function returns a vector with all
duplicate elements removed. In other words, unique() returns a vector of only the 'unique' elements.

Whereas sapply() tries to 'guess' the correct format of the result, vapply()
allows you to specify it explicitly. If the result doesn't match the format
you specify, vapply() will throw an error, causing the operation to stop. This can prevent significant problems in your code that might be caused by getting unexpected return values from sapply()

If we wish to be explicit about the format of the result we expect, we can
use vapply(flags, class, character(1)). The 'character(1)' argument tells R
that we expect the class function to return a character vector of length 1
when applied to EACH column of the flags dataset. Try it now.

 As a data analyst, you'll often wish to split your data up into groups basedon the value of some variable, then apply a function to the members of each group. The next function we'll look at, tapply(), does exactly that

Looking at data
We'll be using a dataset constructed from the United States Department of Agriculture's PLANTS Database (http://plants.usda.gov/adv_search.html)
It's very common for data to be stored in a data frame. It is the default
class for data read into R using functions like read.csv() and read.table(),
- class(plants)
[1] "data.frame"

Since the dataset is stored in a data frame, we know it is rectangular. In
other words, it has two dimensions (rows and columns) and fits neatly into a
table or spreadsheet. Use dim(plants) to see exactly how many rows and columns we're dealing with.
 - dim(plants)
[1] 5166   10 # 5166 rows and 10 column
-  nrow(plants)
[1] 5166
- ncol(plants)
[1] 10
- object.size(plants)
644232 bytes
- names(plants) # will return a character vector of column (i.e. variable) names
 [1] "Scientific_Name"      "Duration"             "Active_Growth_Period"
 [4] "Foliage_Color"        "pH_Min"               "pH_Max"              
 [7] "Precip_Min"           "Precip_Max"           "Shade_Tolerance"     
[10] "Temp_Min_F"
 - head(plants) # default shows you the first six rows of the data
               Scientific_Name          Duration Active_Growth_Period
1                  Abelmoschus              <NA>                 <NA>
2       Abelmoschus esculentus Annual, Perennial                 <NA>
3                        Abies              <NA>                 <NA>
4               Abies balsamea         Perennial    Spring and Summer
5 Abies balsamea var. balsamea         Perennial                 <NA>
6                     Abutilon              <NA>                 <NA>
  Foliage_Color pH_Min pH_Max Precip_Min Precip_Max Shade_Tolerance Temp_Min_F
1          <NA>     NA     NA         NA         NA            <NA>         NA
2          <NA>     NA     NA         NA         NA            <NA>         NA
3          <NA>     NA     NA         NA         NA            <NA>         NA
4         Green      4      6         13         60        Tolerant        -43
5          <NA>     NA     NA         NA         NA            <NA>         NA
6          <NA>     NA     NA         NA         NA            <NA>         NA
- head(plants, 10) #the second arguments tells r how many rows we want to preview
                     Scientific_Name          Duration Active_Growth_Period
1                        Abelmoschus              <NA>                 <NA>
2             Abelmoschus esculentus Annual, Perennial                 <NA>
3                              Abies              <NA>                 <NA>
4                     Abies balsamea         Perennial    Spring and Summer
5       Abies balsamea var. balsamea         Perennial                 <NA>
6                           Abutilon              <NA>                 <NA>
7               Abutilon theophrasti            Annual                 <NA>
8                             Acacia              <NA>                 <NA>
9                  Acacia constricta         Perennial    Spring and Summer
10 Acacia constricta var. constricta         Perennial                 <NA>
   Foliage_Color pH_Min pH_Max Precip_Min Precip_Max Shade_Tolerance Temp_Min_F
1           <NA>     NA     NA         NA         NA            <NA>         NA
2           <NA>     NA     NA         NA         NA            <NA>         NA
3           <NA>     NA     NA         NA         NA            <NA>         NA
4          Green      4    6.0         13         60        Tolerant        -43
5           <NA>     NA     NA         NA         NA            <NA>         NA
6           <NA>     NA     NA         NA         NA            <NA>         NA
7           <NA>     NA     NA         NA         NA            <NA>         NA
8           <NA>     NA     NA         NA         NA            <NA>         NA
9          Green      7    8.5          4         20      Intolerant        -13
10          <NA>     NA     NA         NA         NA            <NA>         NA
- tail(plants, 15)
                      Scientific_Name  Duration Active_Growth_Period
5152                          Zizania      <NA>                 <NA>
5153                 Zizania aquatica    Annual               Spring
5154   Zizania aquatica var. aquatica    Annual                 <NA>
5155                Zizania palustris    Annual                 <NA>
5156 Zizania palustris var. palustris    Annual                 <NA>
5157                      Zizaniopsis      <NA>                 <NA>
5158             Zizaniopsis miliacea Perennial    Spring and Summer
5159                            Zizia      <NA>                 <NA>
5160                     Zizia aptera Perennial                 <NA>
5161                      Zizia aurea Perennial                 <NA>
5162                 Zizia trifoliata Perennial                 <NA>
5163                          Zostera      <NA>                 <NA>
5164                   Zostera marina Perennial                 <NA>
5165                           Zoysia      <NA>                 <NA>
5166                  Zoysia japonica Perennial                 <NA>
     Foliage_Color pH_Min pH_Max Precip_Min Precip_Max Shade_Tolerance
5152          <NA>     NA     NA         NA         NA            <NA>
5153         Green    6.4    7.4         30         50      Intolerant
5154          <NA>     NA     NA         NA         NA            <NA>
5155          <NA>     NA     NA         NA         NA            <NA>
5156          <NA>     NA     NA         NA         NA            <NA>
5157          <NA>     NA     NA         NA         NA            <NA>
5158         Green    4.3    9.0         35         70      Intolerant
5159          <NA>     NA     NA         NA         NA            <NA>
5160          <NA>     NA     NA         NA         NA            <NA>
5161          <NA>     NA     NA         NA         NA            <NA>
5162          <NA>     NA     NA         NA         NA            <NA>
5163          <NA>     NA     NA         NA         NA            <NA>
5164          <NA>     NA     NA         NA         NA            <NA>
5165          <NA>     NA     NA         NA         NA            <NA>
5166          <NA>     NA     NA         NA         NA            <NA>
     Temp_Min_F
5152         NA
5153         32
5154         NA
5155         NA
5156         NA
5157         NA
5158         12
5159         NA
5160         NA
5161         NA
5162         NA
5163         NA
5164         NA
5165         NA
5166         NA
summary() provides different output for each variable, depending on its
class. For numeric data such as Precip_Min, summary() displays the minimum,
1st quartile, median, mean, 3rd quartile, and maximum. These values help us
understand how the data are distributed.
- summary(plants)
                     Scientific_Name              Duration   
 Abelmoschus                 :   1   Perennial        :3031  
 Abelmoschus esculentus      :   1   Annual           : 682  
 Abies                       :   1   Annual, Perennial: 179  
 Abies balsamea              :   1   Annual, Biennial :  95  
 Abies balsamea var. balsamea:   1   Biennial         :  57  
 Abutilon                    :   1   (Other)          :  92  
 (Other)                     :5160   NA's             :1030  
           Active_Growth_Period      Foliage_Color      pH_Min     
 Spring and Summer   : 447      Dark Green  :  82   Min.   :3.000  
 Spring              : 144      Gray-Green  :  25   1st Qu.:4.500  
 Spring, Summer, Fall:  95      Green       : 692   Median :5.000  
 Summer              :  92      Red         :   4   Mean   :4.997  
 Summer and Fall     :  24      White-Gray  :   9   3rd Qu.:5.500  
 (Other)             :  30      Yellow-Green:  20   Max.   :7.000  
 NA's                :4334      NA's        :4334   NA's   :4327   
     pH_Max         Precip_Min      Precip_Max         Shade_Tolerance
 Min.   : 5.100   Min.   : 4.00   Min.   : 16.00   Intermediate: 242  
 1st Qu.: 7.000   1st Qu.:16.75   1st Qu.: 55.00   Intolerant  : 349  
 Median : 7.300   Median :28.00   Median : 60.00   Tolerant    : 246  
 Mean   : 7.344   Mean   :25.57   Mean   : 58.73   NA's        :4329  
 3rd Qu.: 7.800   3rd Qu.:32.00   3rd Qu.: 60.00                      
 Max.   :10.000   Max.   :60.00   Max.   :200.00                      
 NA's   :4327     NA's   :4338    NA's   :4338                        
   Temp_Min_F    
 Min.   :-79.00  
 1st Qu.:-38.00  
 Median :-33.00  
 Mean   :-22.53  
 3rd Qu.:-18.00  
 Max.   : 52.00  
 NA's   :4328
 We can see how many times each value actually occurs in the data with table(plants$Active_Growth_Period)
 - table(plants$Active_Growth_Period)

Fall, Winter and Spring                  Spring         Spring and Fall 
                     15                     144                      10 
      Spring and Summer    Spring, Summer, Fall                  Summer 
                    447                      95                      92 
        Summer and Fall              Year Round 
                     24                       5
The beauty of str() is that it combines many of the features of the other
functions you've already seen, all in a concise and readable format. At the
very top, it tells us that the class of plants is 'data.frame' and that it
has 5166 observations and 10 variables. It then gives us the name and class
of each variable, as well as a preview of its contents
 - str(plants)
'data.frame':   5166 obs. of  10 variables:
 $ Scientific_Name     : Factor w/ 5166 levels "Abelmoschus",..: 1 2 3 4 5 6 7 8 9 10 ...
 $ Duration            : Factor w/ 8 levels "Annual","Annual, Biennial",..: NA 4 NA 7 7 NA 1 NA 7 7 ...
 $ Active_Growth_Period: Factor w/ 8 levels "Fall, Winter and Spring",..: NA NA NA 4 NA NA NA NA 4 NA ...
 $ Foliage_Color       : Factor w/ 6 levels "Dark Green","Gray-Green",..: NA NA NA 3 NA NA NA NA 3 NA ...
 $ pH_Min              : num  NA NA NA 4 NA NA NA NA 7 NA ...
 $ pH_Max              : num  NA NA NA 6 NA NA NA NA 8.5 NA ...
 $ Precip_Min          : int  NA NA NA 13 NA NA NA NA 4 NA ...
 $ Precip_Max          : int  NA NA NA 60 NA NA NA NA 20 NA ...
 $ Shade_Tolerance     : Factor w/ 3 levels "Intermediate",..: NA NA NA 3 NA NA NA NA 2 NA ...
 $ Temp_Min_F          : int  NA NA NA -43 NA NA NA NA -13 NA ...
 
 - sample(1:6, 4, replace = TRUE) #instructs R to randomly select four numbers between 1 and 6, WITH replacement. Sampling with replacement simply means that each number is "replaced" after it is selected, so that the same number can show up more than once. This is what we want here, since what you roll on one die shouldn't affect what you roll on any of the others.
 
 A binomial random variable represents the number of 'successes' (heads) in a given number of independent 'trials' (coin flips). Therefore, we can generate a single random variable that represents the number of heads in 100 flips of our unfair coin using rbinom(1, size = 100, prob = 0.7). Note that you only specify the probability of 'success' (heads) and NOT the probability of 'failure' (tails).
 
 Dates are represented by the 'Date' class and times are represented by the
'POSIXct' and 'POSIXlt' classes. Internally, dates are stored as the number of days since 1970-01-01 and times are stored as either the number of seconds since 1970-01-01 (for 'POSIXct') or a list of seconds, minutes, hours, etc. (for 'POSIXlt').

 Let's start by using d1 <- Sys.Date() to get the current date and store it in the variable d1. (That's the letter 'd' and the number 1.)
 
 - unclass(d1) #  That's the exact number of days since 1970-01-01!
[1] 16787
- d2 <-as.Date("1969-01-01")
- unclass(d2)
[1] -365

The variable t1 contains the time at which you created it (recall you used
Sys.time()). Confirm that some time has passed since you created t1 by using
the 'greater than' operator to compare it to the current time: Sys.time() > t1. 

So we know that some time has passed, but how much? Try subtracting t1 from
the current time using Sys.time() - t1. Don't forget the parentheses at the
end of Sys.time(), since it is a function.
- Sys.time() - t1
Time difference of 21.9651 mins

As always, R tries very hard to give you something sensible given the information that you have provided to it. First, R notes that the data frame
you have given it has just two columns, so it assumes that you want to plot
one column versus the other. Second, since we do not provide labels for either axis, R uses the names of the columns. Third, it creates axis tick marks at nice round numbers and labels them accordingly. Fourth, it uses the other defaults supplied in plot()
- plot(cars)

The help page for plot() highlights the different arguments that the function can take. The two most important are x and y, the variables that will be plotted. For the next set of questions, include the argument names in your answers. That is, do not type plot(cars$speed, cars$dist), although that will work. Instead, use plot(x = cars$speed, y = cars$dist). Note that this produces a slightly different answer than plot(cars). In this
case, R is not sure what you want to use as the labels on the axes, so it
just uses the arguments which you pass in, data frame name and dollar signs
included.

- plot(dist ~ speed, cars) # to see the axis names without the $ sign
- plot(x = cars$speed, y = cars$dist, xlab = "Speed") # to name the x-axis "Speed"
- plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
- plot(cars, main = "My Plot") # to give a name for your plot
- plot(cars, sub = "My Plot Subtitle") # to give a subtitle for your plot

Boxplot(), like many R functions, also takes a "formula" argument, generally
an expression with a tilde ("~") which indicates the relationship between the input variables. This allows you to enter something like mpg ~ cyl to plot the relationship between cyl (number of cylinders) on the x-axis and mpg (miles per gallon) on the y-axis.
- boxplot(formula = mpg ~ cyl, data = mtcars )